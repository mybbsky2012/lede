#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 openwrt-ssr
# Copyright (C) 2017 yushi studio <ywb94@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

SERVICE_DAEMONIZE=1
NAME=shadowsocksr
EXTRA_COMMANDS=rules
CONFIG_FILE=/var/etc/${NAME}.json
CONFIG_UDP_FILE=/var/etc/${NAME}_u.json
CONFIG_SOCK5_FILE=/var/etc/${NAME}_s.json
server_count=0
redir_tcp=0
redir_udp=0
tunnel_enable=0
local_enable=0
kcp_enable_flag=0
kcp_flag=0
pdnsd_enable_flag=0
switch_enable=0
switch_server=$1
MAXFD=32768

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

run_mode=$(uci_get_by_type global run_mode)

gen_config_file() {
         local host=$(uci_get_by_name $1 server)
         if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
         hostip=${host}
         elif  [ "$host" != "${host#*:[0-9a-fA-F]}" ] ;then
         hostip=${host}
         else
          hostip=`ping ${host} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
          if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
          hostip=${hostip}
          else
          hostip=`cat /etc/ssr_ip`
          fi
         fi
         [ $2 = "0" -a  $kcp_flag = "1" ] && hostip="127.0.0.1"
         
         if [ $2 = "0" ] ;then
         config_file=$CONFIG_FILE
         elif [ $2 = "1" ]; then
         config_file=$CONFIG_UDP_FILE
         else
         config_file=$CONFIG_SOCK5_FILE
         fi
         if [ $(uci_get_by_name $1 fast_open) = "1" ] ;then
         fastopen="true";
         else
         fastopen="false";
         fi
	cat <<-EOF >$config_file
		{
		    
		    "server": "$hostip",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "local_address": "0.0.0.0",
		    "local_port": $(uci_get_by_name $1 local_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    "protocol": "$(uci_get_by_name $1 protocol)",
		    "protocol_param": "$(uci_get_by_name $1 protocol_param)",
		    "obfs": "$(uci_get_by_name $1 obfs)",
		    "obfs_param": "$(uci_get_by_name $1 obfs_param)",
		    "fast_open": $fastopen
		}
EOF
}

get_arg_out() {
	case "$(uci_get_by_type access_control router_proxy 1)" in
		1) echo "-o";;
		2) echo "-O";;
	esac
}

start_rules() {
	local server=$(uci_get_by_name $GLOBAL_SERVER server)
	#resolve name
	if echo $server|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
	server=${server}
	elif  [ "$server" != "${server#*:[0-9a-fA-F]}" ] ;then
	server=${server}
	else
	server=`ping ${server} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
	 if echo $server|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
	  echo $server >/etc/ssr_ip
	 else
	  server=`cat /etc/ssr_ip`
	 fi
	fi
	
	kcp_server=$server
	
	local kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable)
	if [ $kcp_enable = "1" ] ;then
    kcp_flag=1
	fi	
	
	local local_port=$(uci_get_by_name $GLOBAL_SERVER local_port)
	local lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	local lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode)
	local router_proxy=$(uci_get_by_type access_control router_proxy)
	if [ "$GLOBAL_SERVER" = "$UDP_RELAY_SERVER" -a $kcp_flag = 0 ]; then
		ARG_UDP="-u"
	elif [ -n "$UDP_RELAY_SERVER" ]; then
		ARG_UDP="-U"
		local udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		local udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port)
	fi
	
	if [ -n "$lan_ac_ips" ]; then
		case "$lan_ac_mode" in
			w|W|b|B) local ac_ips="$lan_ac_mode$lan_ac_ips";;
		esac
	fi
	
#deal	gfw firewall rule
	local gfwmode="" 
	if [ "$run_mode" = "gfw" ]; then
	gfwmode="-g"
	fi
	

	/usr/bin/ssr-rules \
		-s "$server" \
		-l "$local_port" \
		-S "$udp_server" \
		-L "$udp_local_port" \
		-a "$ac_ips" \
		-i "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		$(get_arg_out) $gfwmode $ARG_UDP
			
	return $?
}

start_pdnsd() {
	local usr_dns="$1"
  local usr_port="$2"
  
	local tcp_dns_list="208.67.222.222, 208.67.220.220"
	[ -z "$usr_dns" ] && usr_dns="8.8.8.8"
	[ -z "$usr_port" ] && usr_port="53"
	mkdir -p /var/etc /var/pdnsd
	
  if ! test -f "/var/pdnsd/pdnsd.cache"; then
	dd if=/dev/zero of="/var/pdnsd/pdnsd.cache" bs=1 count=4 2> /dev/null
	chown -R nobody.nogroup /var/pdnsd
	fi
	
	cat > /var/etc/pdnsd.conf <<EOF
global {
	perm_cache=10240;
	cache_dir="/var/pdnsd";
	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
	server_ip = 127.0.0.1;
	server_port = 5353;
	status_ctl = on;
	query_method = tcp_only;
	min_ttl=1h;
	max_ttl=1w;
	timeout=10;
	neg_domain_pol=on;
	proc_limit=2;
	procq_limit=8;
}
server {
	label= "ssr-usrdns";
	ip = $usr_dns;
	port = $usr_port;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
server {
	label= "ssr-pdnsd";
	ip = $tcp_dns_list;
	port = 5353;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
EOF

	/usr/sbin/pdnsd -c /var/etc/pdnsd.conf -d
}

start_tunnel() {
	local tunnel_config_file=$CONFIG_FILE
	if [ "$ARG_UDP" = "-U" ]; then
		tunnel_config_file=$CONFIG_UDP_FILE
	fi

	local local_dns_port=$(uci_get_by_type global tunnel_port)
	if [ "$run_mode" = "gfw" ] ;then
		local_dns_port=5353
	fi

	/usr/bin/ssr-tunnel \
		-c $tunnel_config_file $ARG_OTA -u \
		-l $local_dns_port \
		-b $(uci_get_by_type global tunnel_address 0.0.0.0) \
		-L $(uci_get_by_type global tunnel_forward 8.8.4.4:53) \
		-f /var/run/ssr-tunnel.pid
	tunnel_enable=1
	return $?
}

start_redir() {
	case "$(uci_get_by_name $GLOBAL_SERVER auth_enable)" in
		1|on|true|yes|enabled) ARG_OTA="-A";;
		*) ARG_OTA="";;
	esac
	
	#deal kcp
	local kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable)
	if [ $kcp_enable = "1" ] ;then
		[ ! -f "/usr/bin/ssr-kcptun" ]  &&  return 1
		
		local kcp_str=`/usr/bin/ssr-kcptun -v |grep kcptun|wc -l`
		[ "0" = $kcp_str ] && return 1
		local kcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
		local server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
		local password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
		local kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
		[ "$password" != "" ] && password="--key "${password}
		service_start /usr/bin/ssr-kcptun \
			-r $kcp_server:$kcp_port \
			-l :$server_port $password $kcp_param 
		kcp_enable_flag=1
	fi
	
	gen_config_file $GLOBAL_SERVER 0
	
	redir_tcp=1
	local last_config_file=$CONFIG_FILE
	local pid_file="/var/run/ssr-retcp.pid"
	
	if [ "$ARG_UDP" = "-U" ]; then
		/usr/bin/ssr-redir \
			-c $CONFIG_FILE $ARG_OTA \
			-f /var/run/ssr-retcp.pid
		
		case "$(uci_get_by_name $UDP_RELAY_SERVER auth_enable)" in
			1|on|true|yes|enabled) ARG_OTA="-A";;
			*) ARG_OTA="";;
		esac		
		gen_config_file $UDP_RELAY_SERVER 1
		last_config_file=$CONFIG_UDP_FILE
		pid_file="/var/run/ssr-reudp.pid"
		redir_udp=1
	fi
	
	/usr/bin/ssr-redir \
		-c $last_config_file $ARG_OTA $ARG_UDP \
		-f $pid_file
		
	#deal with dns
	if [ "$run_mode" = "gfw" ] ;then
		if [ "$(uci_get_by_type global pdnsd_enable)" = "0" ] ;then
			start_tunnel
		fi

		if [ "$(uci_get_by_type global pdnsd_enable)" = "1" ] ;then
			local dnsstr="$(uci_get_by_type global tunnel_forward 8.8.4.4:53)"
			local dnsserver=`echo "$dnsstr"|awk -F ':'  '{print $1}'`
			local dnsport=`echo "$dnsstr"|awk -F ':'  '{print $2}'`
			ipset add gfwlist $dnsserver 2>/dev/null
			start_pdnsd $dnsserver $dnsport
			pdnsd_enable_flag=1
		fi
	fi
	
	if [ "$(uci_get_by_type global enable_switch)" = "1" ] ;then
		if [ "$(uci_get_by_name $GLOBAL_SERVER switch_enable)" = "1" ] ;then
			if [ -z "$switch_server" ] ;then
				local switch_time=$(uci_get_by_type global switch_time)
				local switch_timeout=$(uci_get_by_type global switch_timeout)
				service_start /usr/bin/ssr-switch start $switch_time $switch_timeout
				switch_enable=1
			fi
		fi
	fi
	
	return $?
}

start_udp2raw() {
	cat > /var/etc/udp2raw.conf <<EOF
# udp2raw config file
-c
-l0.0.0.0:$(uci_get_by_type udp2raw local_port)
-r$(uci_get_by_type udp2raw server):$(uci_get_by_type udp2raw server_port)
-a
-k $(uci_get_by_type udp2raw key)
--raw-mode $(uci_get_by_type udp2raw raw_mode)
--seq-mode $(uci_get_by_type udp2raw seq_mode)
--cipher-mode $(uci_get_by_type udp2raw cipher_mode)
--auth-mode $(uci_get_by_type udp2raw auth_mode)
EOF
	/usr/bin/udp2raw --conf-file /var/etc/udp2raw.conf >/dev/null 2>&1 &
}

start_udpspeeeder() {
	/usr/bin/udpspeeder -c -l0.0.0.0:$(uci_get_by_type udpspeeder local_port) \
		-r$(uci_get_by_type udpspeeder server):$(uci_get_by_type udpspeeder server_port) \
		-k $(uci_get_by_type udpspeeder key) \
		--mode $(uci_get_by_type udpspeeder speeder_mode) \
		--mtu $(uci_get_by_type udpspeeder mtu) \
		-f$(uci_get_by_type udpspeeder fec) \
		-q$(uci_get_by_type udpspeeder queue_len) \
		--timeout $(uci_get_by_type udpspeeder timeout) \
		>/dev/null 2>&1 &
}

gen_service_file() {
	if [ $(uci_get_by_name $1 fast_open) = "1" ] ;then
	fastopen="true";
	else
	fastopen="false";
	fi       
	cat <<-EOF >$2
		{
		    "server": "$(uci_get_by_name $1 server)",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    "protocol": "$(uci_get_by_name $1 protocol)",
		    "protocol_param": "$(uci_get_by_name $1 protocol_param)",
		    "obfs": "$(uci_get_by_name $1 obfs)",
		    "obfs_param": "$(uci_get_by_name $1 obfs_param)",
		    "fast_open": $fastopen
		}
EOF
}

start_service() {
[ $(uci_get_by_name $1 enable) = "0"  ]  && return 1
let server_count=server_count+1
if [ $server_count = 1 ] ;then
iptables -N SSR-SERVER-RULE && \
iptables -t filter -I INPUT  -j SSR-SERVER-RULE
fi

gen_service_file $1 /var/etc/${NAME}_${server_count}.json
/usr/bin/ssr-server -c /var/etc/${NAME}_${server_count}.json -u -f /var/run/ssr-server${server_count}.pid 
iptables -t filter -A SSR-SERVER-RULE -p tcp --dport $(uci_get_by_name $1 server_port) -j ACCEPT
iptables -t filter -A SSR-SERVER-RULE -p udp --dport $(uci_get_by_name $1 server_port) -j ACCEPT
return 0
}
gen_serv_include() {
FWI=$(uci get firewall.shadowsocksr.path 2>/dev/null) 
[ -n "$FWI" ] || return 0
if [ ! -f $FWI ] ;then
echo '#!/bin/sh' >$FWI
fi
extract_rules() {
echo "*filter"
iptables-save -t filter | grep SSR-SERVER-RULE|sed -e "s/^-A INPUT/-I INPUT/" 
echo 'COMMIT'
}
	cat <<-EOF >>$FWI
	iptables-save -c | grep -v "SSR-SERVER" | iptables-restore -c
	iptables-restore -n <<-EOT
	$(extract_rules)
	EOT
EOF

}
start_server() {
  SERVER_ENABLE=$(uci_get_by_type server_global enable_server)
  [ "$SERVER_ENABLE" = 0 ] && return 0
	mkdir -p /var/run /var/etc

	config_load $NAME
	config_foreach start_service server_config
	gen_serv_include
	return 0
}

start_local() {
	local local_server=$(uci_get_by_type socks5_proxy server)
	[ "$local_server" = "nil" ] && return 1
	mkdir -p /var/run /var/etc
	gen_config_file $local_server 2
	/usr/bin/ssr-local -c $CONFIG_SOCK5_FILE -u  \
		-l $(uci_get_by_type socks5_proxy local_port 1080) \
		-b $(uci_get_by_type socks5_proxy local_address 0.0.0.0) \
		-f /var/run/ssr-local.pid
	local_enable=1	
}

rules() {
	[ "$GLOBAL_SERVER" = "nil" ] && return 1
	mkdir -p /var/run /var/etc
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = "same" ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	if start_rules ;then
	return 0
	else
	return 1
	fi
}

start() {
	case "$(uci_get_by_type udp2raw udp2raw_enable)" in
		1|on|true|yes|enabled)
			start_udp2raw
			;;
	esac
	case "$(uci_get_by_type udpspeeder udpspeeder_enable)" in
		1|on|true|yes|enabled)
			start_udpspeeeder
			;;
	esac

	if [ -z "$switch_server" ] ;then
	GLOBAL_SERVER=$(uci_get_by_type global global_server)
	else
	GLOBAL_SERVER=$switch_server
	switch_enable=1
	fi
	if rules ;then
	start_redir

	if ! [ "$run_mode" = "gfw" ] ;then
	    case "$(uci_get_by_type global tunnel_enable)" in
		1|on|true|yes|enabled)
			start_tunnel
			;;
	esac
	fi
	
	fi
	start_server	
	start_local
	if [ $(uci_get_by_type global monitor_enable) = 1 ] ;then
	let total_count=server_count+redir_tcp+redir_udp+tunnel_enable+kcp_enable_flag+local_enable+pdnsd_enable_flag+switch_enable
	if [ $total_count -gt 0 ] ;then
	#param:server(count) redir_tcp(0:no,1:yes)  redir_udp tunnel kcp local gfw
		service_start /usr/bin/ssr-monitor \
			$server_count $redir_tcp $redir_udp $tunnel_enable \
			$kcp_enable_flag $local_enable $pdnsd_enable_flag $switch_enable
	fi
	fi
	
}

boot() {
	(sleep 5 && start >/dev/null 2>&1) &
}

stop() {
	/usr/bin/ssr-rules -f
	srulecount=`iptables -L|grep SSR-SERVER-RULE|wc -l`
	if [ $srulecount -gt 0 ] ;then
	iptables -F SSR-SERVER-RULE
	iptables -t filter -D INPUT  -j SSR-SERVER-RULE
	iptables -X SSR-SERVER-RULE 2>/dev/null
	fi

	killall -q -9 ssr-monitor

	killall -q -9 udp2raw
	killall -q -9 udpspeeder
	/usr/bin/udp2raw --clear >/dev/null

	if [ -z "$switch_server" ] ;then
	killall -q -9 ssr-switch
	fi
	killall -q -9 ssr-redir
	killall -q -9 ssr-tunnel
	killall -q -9 ssr-server
	killall -q -9 ssr-kcptun
	killall -q -9 ssr-local
	killall -q pdnsd
}
